All your services are belong to Go!
10:00 15 Sept 2013
Tags: services, scalable, simple, safe

Henrik Johansson
(Fredrik Steen)
RedPill Linpro
@dahankzter

* State of the world

- Java is abundant
- Java is hard, yes it is
- App server V2.0.x
- Slow builds

* What is Go?

.image img/gopher.png 180 320

- Native code generation (compiled)
- Statically typed
- Memory safe
- Garbage collected
- Native concurrency support
- Excellent standard library
- Great tools

* Interfaces

- A set of methods is defined for an interface
- If a type has these methods it implements the interface, no need to declare it
- The compile checks that the interfaces are fullfilled

.code examples/interfaces2.go /^type Animal/,/^}/
.code examples/interfaces2.go /^type Cat/,/^}/

- Any type that defines method Speak() satify the Animal interface.
- No implements keyword in Go.

* Interfaces

.play examples/interfaces2.go /START OMIT/,/END OMIT/

* No generics!

- Current implementations deemed insufficient or overly complex
- Interfaces cover many use cases and slices and channels are generic
- The empty inteface can be used with reflection if you have to create generic types

.code examples/interfaces.go /EMPTYIFSTART/,/EMPTYIFSTOP/

* Concurrency done right - don't thread on me!

.play examples/concurrency.go

* Channels - high level building blocks

- Borrows heavily from Unix pipes
- Form together with goroutines a CSP - _Communicating_Sequential_Processes_
- Using channels you can send data to other parts of a program in a controlled manner
- Channels are not magic, you can even send them on channels which can be very powerful!

* GoDoc - Document your code

- Godoc comments are just good comments, the sort you would want to read even if godoc didn't exist.

.code examples/doc.go

* GoDoc - Magic!

.image img/godoc.png

* Unit testing in Go

- Integrated in the core tools
- Tests defined in complementary file "mycode_test.go"
- go test -v
- Benchmarking support built in!
- go test -bench=. (runs all benchmarks in the current directory)
- There are external libraries as well 
  
  gocheck - Fluent API
  gomock  - Mocking

* Unit test in Go - Gorilla Mux

.code examples/mux_test.go /func TestNamedRoutes/,/^}/

* Service applications
What constitutes a service is debatable but there are some things that at least principally belong.

- Messaging 
- Transports (HTTP, WebSockets, AMQP, bittorent, ...)
- Serialization (Protobuf, JSON, XML, ...)
- Persistence (DB, files, cloud, ...)
- Transactions

* A simple service

There is very little code needed to set up an HTTP server.

.code examples/simpleservice.go /func main/,/^}/

One or several handler functions is all that is needed.

The handler functions are dispatched to based on the path of the request.

This is all part of the standard library!

* Let's have a little logic and load some data from the DB...

.play examples/simpleservice.go /func handler/,/^}/

* Known users
