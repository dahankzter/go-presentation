All your services are belong to Go!
10:00 15 Sept 2013
Tags: services, scalable, simple, safe

Henrik Johansson
Redpill Linpro
@dahankzter

Fredrik Steen
Redpill Linpro


* State of the world

- Java is abundant
- Java is hard, yes it is
- App server V2.0.x
- Slow builds

* What is Go?

.image img/gopher.png 180 320

- Native code generation (compiled)
- Statically typed
- Memory safe
- Garbage collected
- Native concurrency support
- Excellent standard library
- Great tools

* Interfaces

- A set of methods is defined for an interface
- If a type has these methods it implements the interface, no need to declare it
- The compile checks that the interfaces are fullfilled

.code examples/interfaces2.go /^type Animal/,/^}/
.code examples/interfaces2.go /^type Cat/,/^}/

- Any type that defines method Speak() satify the Animal interface.
- No implements keyword in Go.

* Interfaces

.play examples/interfaces2.go /START OMIT/,/END OMIT/

* No generics!

- Current implementations deemed insufficient or overly complex
- Interfaces cover many use cases and slices and channels are generic
- The empty inteface can be used with reflection if you have to create generic types

.code examples/interfaces.go /EMPTYIFSTART/,/EMPTYIFSTOP/

* Concurrency done right - don't thread on me!

.play examples/concurrency.go

* Channels - high level building blocks

- Borrows heavily from Unix pipes
- Form together with goroutines a [[http://www.usingcsp.com/cspbook.pdf][CSP - Communicating Sequential Processes]]
- Using channels you can send data to other parts of a program in a controlled manner
- Channels are not magic, you can even send them on channels which can be very powerful!

.code examples/chan.go

* GoDoc - Document your code

- Godoc comments are just good comments, the sort you would want to read even if godoc didn't exist.

.code examples/doc.go

* GoDoc - Magic!

.image img/godoc.png

* Unit testing in Go

- Integrated in the core tools
- Tests defined in complementary file "mycode_test.go"
- go test -v
- Benchmarking support built in!
- go test -bench=. (runs all benchmarks in the current directory)
- There are external libraries as well

  gocheck - Fluent API
  gomock  - Mocking

* Unit test in Go - Gorilla Mux

.code examples/mux_test.go /func TestNamedRoutes/,/^}/

* Service applications
What constitutes a service is debatable but there are some things that at least principally belong.

- Messaging
- Transports (HTTP, WebSockets, AMQP, bittorent, ...)
- Serialization (Protobuf, JSON, XML, ...)
- Persistence (DB, files, cloud, ...)
- Transactions

* A simple service

There is very little code needed to set up an HTTP server.

.code examples/simpleservice.go /func main/,/^}/

One or several handler functions is all that is needed.

The handler functions are dispatched to based on the path of the request.

This is all part of the standard library!

* Let's have a little logic and load some data from the DB...

.play examples/simpleservice.go /func handler/,/^}/

* Go was built for this...

Google services rely heavily on this type of design although the complexity can be somewhat higher...

Simple, performant and very little fuss to get it rolling.

What about messaging?

Do we need messaging in todays NoSQL times?

Well, yes. Messaging has its very important use cases and there are many types of applications that can benefit tremendously from messaging.

- Background processing
- Notification systems (why poll?)

* NSQ - Bitly

- Brokerless, distributed and decentralized topologies without single points of failure
- Fault tolerance and high availability coupled with a reliable message delivery guarantee
- It provides _at_least_once_ semantics for delivery
- It provides _no_ordering_ between messages. If you need ordering you have to provide some other means to enuser it. (Much like JMS...)
- Implemented in Go but has various bindings for other languages

* AMQP - RabbitMQ

- Broker model that can be clustered
- Stable software that has been around for some time
- Quite similar to JMS in it's idea
- RabbitMQ quite popular in the _scalable_everything_world_ for some reason. Erlang has it's problems...
- Go has a client for it

 go get github.com/streadway/amqp

* Various other options

- Beanstalk
- MongoDB - Decent queue although it is pull based
- Redis has excellent pub/sub support
- ZeroMQ (nanomsg) if you are not afraid to get your hands dirty
- NoSQL flavor of the day probably works to various degree...

* Persistence SQL

- Go has an SQL interface in the standard library

 import "database/sql"

- _Drivers_ for various vendors exist
- Postgres, multiple options but [[https://github.com/lib/pq]] is probably best
- MySQL, several options available
- DB2
- Oracle (wraps oci8)
- ODBC
- Several _ORM_ solutions available but generally the save little time depending on your use case of course

* Persistence NoSQL

- MongoDB, excellent driver _mgo_
- Redis, at least a handful of clients
- Memcache, both client _and_server_! Memcache creator _Brad_Fitzpatrick_ is on the Go core team
- Groupcache, [[github.com/golang/groupcache]] by _Brad_Fitzpatrick_ now powers all downloads from Google
- CouchDB
- Cassandra
- Riak

* Known users

- Google _of_course_ - [[http://talks.golang.org/2013/oscon-dl.slide#1][dl.google.com]], Vitesse enables Youtube to use MySQL
- Appengine support
- Soundcloud
- IronIO
- Ubuntu
- docker.io
- Heroku
- Stathat
